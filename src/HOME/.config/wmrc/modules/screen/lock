#!/bin/sh

export WMRC_DEPENDENCIES='i3lock xrandr convert perl xkb-switch xset xdotool'

CACHE_DIR="$HOME/.cache/lockscreen"

generate_individual() {

  local BCK_IMG
  local MD5_BKG_IMG
  local MD5_SCREEN_CONFIG

  BCK_IMG="$HOME/Pictures/lockscreen.png"
  [ -f "$BCK_IMG" ] || \
    {
      error "Lockscreen image '$BCK_IMG' is missing!"
      exit 3
    }

  mkdir -p "$CACHE_DIR" || \
    {
      error "Unable create lockscreen chache directory!"
      exit 4
    }

  MONITORS="$(xrandr --listmonitors |
            perl -n -e'/\d+: \+[^ ]+ (\d+)\/(\d+)x(\d+)\/(\d+)\+(\d+)\+(\d+)/
            && print "$1:$3:$5:$6 "')"

  MD5_BKG_IMG="$(md5sum "$BCK_IMG" | cut -c 1-16)"
  MD5_SCREEN_CONFIG="$(echo "$MONITORS" | md5sum - | cut -c 1-16)"

  OUTPUT_IMG="$CACHE_DIR/$MD5_SCREEN_CONFIG.$MD5_BKG_IMG.png"
  OUTPUT_IMG_WIDTH=0
  OUTPUT_IMG_HEIGHT=0

  PARAMS=""

  local CACHE_IMG
  local IFS
  local W
  local H
  local X
  local Y

  for M in $MONITORS; do

    IFS=:
    set -- $M
    W=$1
    H=$2
    X=$3
    Y=$4

    CACHE_IMG="$CACHE_DIR/$W.$H.$MD5_BKG_IMG.png"

    [ -f "$CACHE_IMG" ] || {
      debug 'Generating new monitor losckscreen image' "Monitor $M"
      convert "$BCK_IMG" '-resize' "${W}X${H}^" \
              '-gravity' 'Center' '-crop' "${W}X${H}+0+0" \
              '+repage' "$CACHE_IMG"
    }

    [ "$OUTPUT_IMG_WIDTH" -lt $((W+X)) ] && \
      OUTPUT_IMG_WIDTH=$((W+X))

    [ "$OUTPUT_IMG_HEIGHT" -lt $((H+Y)) ] && \
      OUTPUT_IMG_HEIGHT=$((H+Y))

    PARAMS="$PARAMS $CACHE_IMG -geometry +$X+$Y -composite"

  done


}

generate_composite() {


  generate_individual

  if ! [ -f "$OUTPUT_IMG" ]; then

    debug 'Generating new composite losckscreen image'
    convert -size "${OUTPUT_IMG_WIDTH}x${OUTPUT_IMG_HEIGHT}" \
      "xc:#101010" "$OUTPUT_IMG"
    convert -colorspace sRGB -type truecolor "$OUTPUT_IMG" $PARAMS "$OUTPUT_IMG"

  fi

}

lock() {
  info 'Screen lock'

  [ -z "$(pgrep -u "$(whoami)" i3lock)" ] || \
    {
      error "Lockscreen is already running!"
      exit 2
    }

  generate_composite

  [ "$2" = "wait" ] && WAIT="-n"

  i3lock -u -i "$OUTPUT_IMG" -t -e "$WAIT"

}

smart_lock() {
  info 'Smart screen lock'

  LANG="$(xkb-switch -p)"
  CAPS="$(xset -q |
        grep -Pzo "Caps Lock: +(on|off)" |
        sed "s/^.*: *//" |
        tr '\0' '\n')"

  xkb-switch -s us
  if [ "$CAPS" = "on" ]; then
    xdotool key Caps_Lock
  fi

  generate_composite

  if [ "$1" != "screen_on" ]; then
    sleep 0.2
    xset dpms force off
  fi

  info 'Pausing notifications'
  call ui/notify pause

  lock 'lock' 'wait'

  info 'Resuming notifications'
  call ui/notify resume

  xkb-switch -s "$LANG"
  if [ "$CAPS" = "on" ]; then
    xdotool key Caps_Lock
  fi

}

start() {
  if daemon_get_pid; then
		error "Lockscreen daemon is already running!"
		return 1
	fi
  info "Starting lockscreen auto lock daemon"
  blank_timeout="${1:-300}"
  lock_timeout="${2:-305}"
  generate_composite
  xset s off -dpms &
	xidlehook \
		--not-when-fullscreen \
		--not-when-audio \
		--timer "$blank_timeout" \
			"xset dpms force off" '' \
		--timer "$lock_timeout" \
			"wmrc call screen/lock smart_lock" '' \
		> /dev/null &
  daemon_set_pid "$!"
}
