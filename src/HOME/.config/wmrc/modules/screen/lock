#!/bin/sh

export WMRC_DEPENDENCIES='services/notifications hid/device screen/backlight i3lock sha1sum awk perl magick xdotool xrandr xkb-switch xset'

WMRC_LOCKSCREEN="${WMRC_LOCKSCREEN:-$HOME/Pictures/wallpaper.png}"

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/wmrc/imagen"

create_cache_dir() {
    if ! mkdir -p "$cache_dir"; then
        error 'Unable to create cache directory' "$cache_dir"
        return 1
    fi
    if ! mkdir -p "$cache_dir/$1"; then
        error 'Unable to create cache image subdirectory' "$cache_dir"
        return 1
    fi
}

set_input_image() {
    if ! test -f "$1"; then
        error 'Lockscreen image not found' "$1"
        return 1
    fi
    if ! magick identify -regard-warnings "$1" >/dev/null; then
        error 'Lockscreen image is corrupted' "$1"
        return 1
    fi
    image="$1"
    image_hash="$(
        sha1sum "$image" | cut -d ' ' -f1
    )"
}

detect_monitors() {
    monitors="$(
        xrandr --listmonitors | \
        perl -n -e'/\d+: \+[^ ]+ (\d+)\/(\d+)x(\d+)\/(\d+)\+(\d+)\+(\d+)/ && print "$1:$3:$5:$6 "'
    )"
    if [ -z "$monitors" ]; then
        error 'No monitors detected'
        return 1
    fi
    monitors_hash="$(
        echo "$monitors" | sha1sum | cut -d ' ' -f1
    )"
}

generate_composite() {

    if ! set_input_image "$WMRC_LOCKSCREEN" || ! detect_monitors; then
        return 1
    fi
    if ! create_cache_dir "$image_hash"; then
        return 1
    fi

    composite_width=0
    composite_height=0
    composite_params=''
    composite_image="$cache_dir/$image_hash/$monitors_hash.png"

    if test -f "$composite_image"; then
        debug 'Composite image exists' "$composite_image"
        return
    fi

    for monitor in $monitors; do
        eval "$(
            echo "$monitor" | awk -F ':' '{
                printf("width=%d\n", $1);
                printf("height=%d\n", $2);
                printf("top=%d\n", $4);
                printf("left=%d\n", $3);
            }'
        )"
        # shellcheck disable=SC2154
        size="${width}X${height}"
        scaled_image="$cache_dir/$image_hash/$size.png"

        if test -f "$scaled_image"; then
            debug 'Scaled image exists' "$scaled_image"
            continue
        fi

        if ! eval "magick $image -resize '$size^' -gravity 'Center' -crop '$size+0+0' +repage $scaled_image" \
            1>/dev/null  2>/dev/null; then
            error 'Scaled image generation failed'
            return 1
        fi
        info 'Generated scaled image' "$scaled_image"

        # shellcheck disable=SC2154
        right="$((width+left))"
        if [ "$composite_width" -lt $right ]; then
            composite_width="$right"
        fi
        # shellcheck disable=SC2154
        bottom="$((height+top))"
        if [ "$composite_height" -lt $bottom ]; then
            composite_height="$bottom"
        fi
        composite_params="$composite_params $scaled_image -geometry +$left+$top -composite"

    done

    if ! eval "magick -size ${composite_width}x${composite_height} 'xc:#000000' $composite_image" \
        1>/dev/null  2>/dev/null || \
        ! eval "magick -colorspace sRGB -type truecolor $composite_image $composite_params $composite_image" \
        1>/dev/null  2>/dev/null; then
        error 'Composite image generation failed'
        return 1
    fi

    info 'Generated composite image' "$composite_image"

}

parse_args() {
    while [ -n "$1" ]; do
        eval "$(
            echo "$1" | awk -F '=' \
            'NF == 1 { printf("%s=on\n",$1); }
            NF == 2 { printf("%s='\''%s'\''\n",$1,$2); }'
        )"
        shift
    done
}

save_keyboard() {
    keyboard_lang="$(
        xkb-switch -p
    )"
    keyboard_capslock="$(
        xset -q | awk 'match($0, /Caps Lock: +(on|off)/,state) { print state[1]; }'
    )"
    debug 'Saved keyboard state' "lang=$keyboard_lang clock=$keyboard_capslock"
}

restore_keyboard() {
    xkb-switch -s "$keyboard_lang" &
    if [ "$keyboard_capslock" = "on" ]; then
        xdotool key Caps_Lock &
    fi
    debug 'Restored keyboard state'
}

disable_pointer() {
    call hid/device disable mouse &
    call hid/device disable touchpad &
    call hid/device disable touchscreen &
}

enable_pointer() {
    call hid/device enable mouse &
    call hid/device enable touchpad &
    call hid/device enable touchscreen &
}

pause_services() {
    call services/notifications pause &
    if command -v safeeyes >/dev/null && \
        ! safeeyes --status 2>/dev/null | grep -q 'not running'; then
        safeeyes --disable &
        debug 'Disabled Safe Eyes'
    fi
}

resume_services() {
    call services/notifications resume &
    if command -v safeeyes >/dev/null && \
        ! safeeyes --status 2>/dev/null | grep -q 'not running'; then
        safeeyes --enable &
        debug 'Enabled Safe Eyes'
    fi
}

turn_off_monitor() {
    if [ "$screen" != 'on' ]; then
        sleep 0.5 && call screen/backlight off &
    fi
}

lock() {
    if [ -z "$composite_image" ]; then
        error 'Unexpected invocation'
        return 1
    fi
    i3lock -u -i "$composite_image" -t -e -n &
    daemon_set_pid "$!"
    info 'Started lockscreen'
    daemon_get_pid
    wait "$DAEMON_PID"

}

wrapped_lock() {
    if [ -z "$composite_image" ]; then
        error 'Unexpected invocation'
        return 1
    fi

    save_keyboard
    disable_pointer &
    pause_services &
    turn_off_monitor &

    lock

    resume_services &
    enable_pointer &
    restore_keyboard &
    wait
}

start() {
    if ! generate_composite; then
        error 'Lockscreen composite image generation failed'
        return 1
    fi
    if daemon_get_pid; then
        error "Lockscreen is already running"
        return 1
    fi
    parse_args "$@"
    wrapped_lock &
    if [ "$detach" != 'on' ]; then
        wait
    fi
}
