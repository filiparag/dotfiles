#!/bin/sh

export WMRC_DEPENDENCIES='arandr xrandr perl rofi'
export WMRC_LIBRARIES='notify'

SCREENLAYOUT="$HOME/.screenlayout"

get_dpi() {
  dpi="$(awk '$1=="Xft.dpi:"{print $2}' "$HOME/.Xresources")"
}

manual() {

  LAYOUT_OLD="$(xrandr --listmonitors | sha1sum)"

  WAIT=$(arandr)

  LAYOUT_NEW="$(xrandr --listmonitors | sha1sum)"

  if [ "$LAYOUT_OLD" != "$LAYOUT_NEW" ]; then
    notify -i display 'Set manual screen layout'
    reload_ui
  fi

}

restore() {

  LAYOUT_OLD="$(xrandr --listmonitors | sha1sum)"

  [ -x "$SCREENLAYOUT/.restore.sh" ] && \
    "$SCREENLAYOUT/.restore.sh" || \
    {
      error "Unable to restore previous monitor layout!"
      exit 3
    }

  LAYOUT_NEW="$(xrandr --listmonitors | sha1sum)"

  if [ "$LAYOUT_OLD" != "$LAYOUT_NEW" ]; then
    notify -i display 'Restore previous screen layout'
    reload_ui
  fi
}

defined() {

  LAYOUT_OLD="$(xrandr --listmonitors | sha1sum)"

  SCRIPT="$(echo "$1" | sed 's/ \[.*//').sh"

  [ -x "$SCREENLAYOUT/$SCRIPT" ] ||
    {
      error "Unable to set monitor layout to '$1'!"
      exit 2
    }

  cat "$SCREENLAYOUT/$SCRIPT" > "$SCREENLAYOUT/.restore.sh"
  chmod +x "$SCREENLAYOUT/.restore.sh"

  "$SCREENLAYOUT/$SCRIPT"

  LAYOUT_NEW="$(xrandr --listmonitors | sha1sum)"

  if [ "$LAYOUT_OLD" != "$LAYOUT_NEW" ]; then
    notify -i display 'Set defined screen layout' "$1"
    reload_ui
  fi
}

monitor() {

  LAYOUT_OLD="$(xrandr --listmonitors | sha1sum)"

  OFF="$(xrandr |
            perl -n -e '/^([-_a-zA-Z0-9]+) (connected|disconnected)/ &&
            print "--output $1 --off\n"' |
            grep -Fv "$(echo "$SEL" | sed 's/ (.*//')" |
            sed -z 's/\n/ /g')"
  ON="$(echo "$SEL" |
          perl -n -e'/^([^ ]+).* (\d+x\d+)/ &&
          print "--output $1 --primary --mode $2 --pos 0x0 --rotate normal"')"

  NEW_LAYOUT="xrandr $ON $OFF"
  printf "#!/bin/sh\n%s" "$NEW_LAYOUT" > "$SCREENLAYOUT/.restore.sh"
  chmod +x "$SCREENLAYOUT/.restore.sh"

  $NEW_LAYOUT

  LAYOUT_NEW="$(xrandr --listmonitors | sha1sum)"

  if [ "$LAYOUT_OLD" != "$LAYOUT_NEW" ]; then
    notify -i display 'Set generic monitor layout' "$SEL"
    reload_ui
  fi

}

reload_ui() {

  debug 'Reload UI'
  wmrc unit reload

}

start() {

  DEFINED="$(find "$SCREENLAYOUT" -type f \
          -name "*.sh" -printf "%P\n" | \
          cut -d'.' -f1)"
  MONITORS="$(xrandr |
            perl -0777 -nle 'print "$1 ( $2x$3 )\n" while
            m/^([-_a-zA-Z0-9]+) connected.*\n *(\d+)x(\d+)/gm')"

  for D in $DEFINED; do
    L="$(
      awk \
      'BEGIN {
        display=0;
        mode=0;
        primary=0;
        name="";
      }
      /^xrandr/ {
        for (i=1;i<=NF;++i) {
          if ($i=="--output") {
            display=1;
          } else if (display) {
            name=$i;
            display=0;
          } else if (name!="" && $i=="--mode") {
            mode=1;
          } else if (name!="" && $i=="--primary") {
            primary=1;
          } else if (name!="" && mode) {
            res[name]=$i;
            prim[name]=(primary) ? " primary " : " ";
            name="";
            mode=0;
            primary=0;
          }
        }
      }
      END {
        for (d in res) {
          match(res[d],/^"([^_]+).*/,r);
          printf("%s%s%s ", d, prim[d], r[1]);
        }
      }' "$SCREENLAYOUT/$D.sh"
    )"
    echo "$L"
    LAYOUT="$LAYOUT$D [ $L]\n"
  done

  MANUAL="Manual temporary layout configuration\n"
  [ -x "$SCREENLAYOUT/.restore.sh" ] && \
    RESTORE="Restore last used layout\n"

  LAYOUT="$MANUAL$RESTORE$LAYOUT$MONITORS"

  get_dpi
  SEL="$(printf '%b' "$LAYOUT" |
    rofi \
    -dpi "$dpi" \
    -dmenu \
    -p 'monitor layout' -i \
    -columns 1 \
    -theme style/style_normal_grid.rasi)"

  [ -z "$SEL" ] && return

  if [ "$SEL\n" = "$MANUAL" ]; then
    manual
  elif [ "$SEL\n" = "$RESTORE" ]; then
    restore
  elif echo "$SEL" | grep -Fq "["; then
    defined "$SEL"
  elif echo "$SEL" | grep -Fq "("; then
    monitor "$SEL"
  fi

}
