#!/bin/sh

export WMRC_DEPENDENCIES='xsetwacom xrandr awk bspc jq'

detect_device() {
    if [ -z "$1" ]; then
        error 'Device type not provided'
    fi
    xsetwacom list devices | awk -v type="$1" '
        $0 ~ sprintf("type: %s", type) {
            for(i=1;i<NF;++i) {
                if($i!="id:")
                    printf("%s",$i);
                else
                    break;
                if($(i+1)!="id:")
                    printf(" ");
            }
            printf("\n");
        }'
}

detect_pad() {
    if [ -z "$WACOM_PAD" ]; then
        WACOM_PAD="$(detect_device 'PAD')"
        if [ -z "$WACOM_PAD" ]; then
            debug 'No Wacom pad detected'
            return 1
        else
            info 'Detected Wacom pad' "$WACOM_PAD"
        fi
    fi
}

detect_stylus() {
    if [ -z "$WACOM_STYLUS" ]; then
        WACOM_STYLUS="$(detect_device 'STYLUS')"
        if [ -z "$WACOM_STYLUS" ]; then
            debug 'No Wacom stylus detected'
            return 1
        else
            info 'Detected Wacom stylus' "$WACOM_STYLUS"
        fi
    fi
}

set_pressure() {
    if ! detect_stylus; then
        return 1
    fi
    curve="${1:-0 50 100 10}"
    info 'Set pen pressure curve' "$curve"
    eval "xsetwacom set '$WACOM_STYLUS' PressureCurve '$curve'"
}

set_center_area() {
    if ! detect_stylus; then
        return 1
    fi
    map="$(
        xrandr | awk \
        'match($0, /^.+ connected primary ([0-9]+)x([0-9]+)([+-][0-9]+)([+-][0-9]+)/, a) {
            w=int(a[1]);
            h=int(a[2]);
            x=int(a[3]);
            y=int(a[4]);
            if (w/h>1.6) {
                H=h;
                W=h*(16/10);
            } else {
                W=w;
                H=w/(16/10);
            }
            X=(w-W)/2;
            Y=(h-H)/2;
            printf("%ix%i%s%i%s%i",
            W, H,
            (x>=0) ? "+" : "-", X,
            (y>=0) ? "+" : "-", Y);
        }'
    )"
    info 'Map stylus to output' "$map"
    xsetwacom set "$WACOM_STYLUS" MapToOutput "$map"
}

bind_buttons() {
    detect_pad
    detect_stylus
    if [ -z "$WACOM_PAD" ] && [ -z "$WACOM_STYLUS" ]; then
        warn 'No Wacom input device detected'
        return 0
    fi
    profile="$1"
    case "$profile" in
        'Inkscape')
            set_pressure '0 0 10 15';
            xsetwacom set "$WACOM_PAD" Button 1 'key +ctrl z';
            xsetwacom set "$WACOM_PAD" Button 2 'key +ctrl +shift z';
            xsetwacom set "$WACOM_PAD" Button 3 'key s';
            xsetwacom set "$WACOM_PAD" Button 8 'key c';;
        'krita')
            set_pressure '0 50 100 10';
            xsetwacom set "$WACOM_PAD" Button 1 'key +ctrl z';
            xsetwacom set "$WACOM_PAD" Button 2 'key +ctrl +shift z';
            xsetwacom set "$WACOM_PAD" Button 3 'key +shift';
            xsetwacom set "$WACOM_PAD" Button 8 'key +ctrl';
            ;;
        'rnote')
            set_pressure;
            xsetwacom set "$WACOM_PAD" Button 1 'key +ctrl z';
            xsetwacom set "$WACOM_PAD" Button 2 'key +ctrl +shift z';
            xsetwacom set "$WACOM_PAD" Button 3 'key +ctrl +minus';
            xsetwacom set "$WACOM_PAD" Button 8 'key +ctrl +shift +plus';;
        *)
            profile='Gromit-MPX (default)'
            set_pressure;
            xsetwacom set "$WACOM_PAD" Button 1 'key F8';
            xsetwacom set "$WACOM_PAD" Button 2 'key +shift F8';
            xsetwacom set "$WACOM_PAD" Button 3 'key +shift F9';
            xsetwacom set "$WACOM_PAD" Button 8 'key F9';
    esac
    info 'Rebound buttons for profile' "$profile"
}

start() {
    if daemon_get_pid; then
		error "Wacom focus daemon is already running!"
		return 1
	fi
    detect_pad
    detect_stylus
    if [ -z "$WACOM_PAD" ] && [ -z "$WACOM_STYLUS" ]; then
        warn 'No Wacom input device detected'
        return 0
    fi
    set_pressure ''
    set_center_area ''
    focus_daemon
}

focus_daemon() {
    last_node_class=""
    bspc subscribe node_focus | while read -r line; do
        node_class="$(echo "$line" | cut -d' ' -f4 | xargs -I{} bspc query -T -n {}  | jq -r '.client.className')"
        if [ "$last_node_class" != "$node_class" ]; then
            last_node_class="$node_class"
            bind_buttons "$node_class"
            info "$node_class"
        fi
    done &
    daemon_set_pid $!
}
